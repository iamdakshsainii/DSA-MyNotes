// Step : Convert the map entries into a list and sort by frequency in descending order
    List<Map.Entry<Character, Integer>> entries = new ArrayList<>(freqMap.entrySet());
    entries.sort((a, b) -> b.getValue() - a.getValue()); // Sort by frequency
// yha methods k likhne par bhi dyan do kon capital letter m h kon small 



// The sorting technique entries.sort((a, b) -> b.getValue() - a.getValue()) is particularly
 useful in problems where you need to:
// Sort elements (characters, numbers, words, etc.) 
// based on their frequency in descending order.
// After counting the frequencies using a HashMap, you can sort the entries to 
// get the most frequent ones first, and use that information for further tasks 
// like constructing strings or selecting top k elements.
// These are just a few common use cases where you can apply this approach to 
// sort by frequency or some other numeric metric.

// Example > (t,r,e,e)

// Step-by-step sorting process:
// Compare a = ('t', 1) and b = ('r', 1):
// b.getValue() - a.getValue() = 1 - 1 = 0, so their order doesnâ€™t change.
// Compare a = ('r', 1) and b = ('e', 2):

// b.getValue() - a.getValue() = 2 - 1 = 1, so b (which is 'e') should come before a (which is 'r').
// Compare a = ('t', 1) and b = ('e', 2):

// b.getValue() - a.getValue() = 2 - 1 = 1, so 'e' should come before 't'.
// Final Sorted List:
// After sorting, entries will be:

// result
// [('e', 2), ('t', 1), ('r', 1)]



Examples for last min solve

1. Frequency Sort (LeetCode 451)
Problem: Sort characters in a string by frequency in descending order.
Link: LeetCode 451 - Frequency Sort
Example:
Input: "tree"
Output: "eetr" (characters sorted by frequency in descending order)

2. Top K Frequent Elements (LeetCode 347)
Problem: Given a non-empty array of integers, return the k most frequent elements.
Link: LeetCode 347 - Top K Frequent Elements
Example:
Input: [1,1,1,2,2,3], k = 2
Output: [1, 2] (since 1 appears 3 times, and 2 appears 2 times)

3. Sort List (LeetCode 148)
Problem: Sort a linked list in O(n log n) time complexity using constant space complexity.
Link: LeetCode 148 - Sort List
Example:
Input: [4,2,1,3]
Output: [1, 2, 3, 4]

4. Group Anagrams (LeetCode 49)
Problem: Given an array of strings, group the anagrams together.
Link: LeetCode 49 - Group Anagrams
Example:
Input: ["eat", "tea", "tan", "ate", "nat", "bat"]
Output: [["eat", "tea", "ate"], ["tan", "nat"], ["bat"]]

5. Sort Colors (LeetCode 75)
Problem: Given an array with n objects colored red, white, or blue, sort them in-place.
Link: LeetCode 75 - Sort Colors
Example:
Input: [2,0,2,1,1,0]
Output: [0,0,1,1,2,2]

6. Kth Largest Element in an Array (LeetCode 215)
Problem: Find the kth largest element in an unsorted array.
Link: LeetCode 215 - Kth Largest Element in an Array
Example:
Input: [3,2,1,5,6,4], k = 2
Output: 5

7. Majority Element (LeetCode 169)
Problem: Given an array of size n, find the majority element (the element that appears more than n/2 times).
Link: LeetCode 169 - Majority Element
Example:
Input: [3,2,3]
Output: 3 (since 3 is the majority element)

8. Reorganize String (LeetCode 767)
Problem: Given a string s, rearrange the characters so that no two adjacent characters are the same.
Link: LeetCode 767 - Reorganize String
Example:
Input: "aab"
Output: "aba" (characters reorganized to avoid adjacent duplicates)

9. Maximum Frequency Stack (LeetCode 895)
Problem: Design a stack that supports push, pop, top, and retrieving the most frequent element in constant time.
Link: LeetCode 895 - Maximum Frequency Stack
Example:
Input: ["push(5)", "push(7)", "push(5)", "push(7)", "push(4)", "pop()"]
Output: 5 (since 5 appears the most frequently when popping)

10. Find the Duplicate Number (LeetCode 287)
Problem: Given an array of integers, find the duplicate number that appears more than once.
Link: LeetCode 287 - Find the Duplicate Number
Example:
Input: [1,3,4,2,2]
Output: 2 (since 2 is the duplicate number)

11. Longest Substring with At Most Two Distinct Characters (LeetCode 159)
Problem: Given a string, find the length of the longest substring that contains at most two distinct characters.
Link: LeetCode 159 - Longest Substring with At Most Two Distinct Characters
Example:
Input: "eceba"
Output: 3 (substring "ece" is the longest)

12. Palindrome Permutation (LeetCode 266)
Problem: Given a string, check if a permutation of the string could form a palindrome.
Link: LeetCode 266 - Palindrome Permutation
Example:
Input: "carerac"
Output: true (since "carerac" can form a palindrome)





