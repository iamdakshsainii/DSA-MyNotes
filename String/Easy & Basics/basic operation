    Character Ranges:
    s.charAt(i) - '0' works for digits (from '0' to '9') and maps them to the range 0 to 9.

    s.charAt(i) - '0'  // used  agar string m numeric ho jese'54'  ho aur index dekhna ho
    This expression is used when you want to map numeric characters (from '0' to '9') to their
    corresponding integer values. Here's how it works:
    For '0': s.charAt(i) - '0' → 48 - 48 = 0    
    For '1': s.charAt(i) - '0' → 49 - 48 = 1
**************************************************************************************************************************************
    s.charAt(i) - 'a' // used  agar string m character ho aur index dekhna ho
    This expression is used when you want to map lowercase alphabetic characters (from 'a' to 'z') 
    to the range of 0 to 25. Here's how it works:
    For 'a': s.charAt(i) - 'a' → 97 - 97 = 0
    For 'b': s.charAt(i) - 'a' → 98 - 97 = 1
    For 'z': s.charAt(i) - 'a' → 122 - 97 = 25
********************************************************************************************************************************


    //splits the string based on whitespace kitne bhi 
    // used ones
    System.out.println(Arrays.toString(words));
    String[] words =Str.split("\\s+");
       
    String myStr = "    Hello World!    ";
    //trim-- sare space hta deega age piche k
    System.out.println(myStr.trim());

    // Check if present or not
    System.out.println(Str.contains("Hel"));

     // Returns true because they are equal
    String myStr1 = "Hello";
    String myStr2 = "Hello";
    System.out.println(myStr1.equals(myStr2)); 
    
**************************************************************************************************************************************

>> Convert char array to string directly use ->
    return new String(chararray_name)

>> String Sorting
// if any kind of sorting needs to be done
// it uses to sort directly with most optimized way 
// it use quick sort whose complexity is nlogn for avg case and n2 for worst for primitve array like int[], char[].
// but for integer[], String[] like objects use timsort which hold nlogn
use Arrays.sort(chararray) 
// >> timsort use logn space complexity becuase of auxiliary  space

>> 





