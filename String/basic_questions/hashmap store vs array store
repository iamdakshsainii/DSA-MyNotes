HashMap Approach	
Time Complexity	O(n)
Space Complexity	O(1) (constant space for 26 chars)
Ease of Use	More flexible (can handle any character set)	
Performance	Slight overhead due to hashing (although this is often minimal)


Array Approach
Time Complexity	O(n)
Space Complexity	O(1) (constant space for 26 chars)
Simple and efficient for fixed alphabet sizes (e.g., lowercase English)
Slightly faster due to direct indexing with arrays



//?           Question valid anagram

Given two strings s and t, return true if t is an 
anagram of s, and false otherwise.
Example 1:
Input: s = "anagram", t = "nagaram"
Output: true

method 3
>char array and sort and compare
>array of 26 size and store at respective index and increment value for s and decrement for t so that at last it has  0
>hashmap only implementation alg baki sab same

____________________________________________________________________________________________________________________________

     //method 1
class Solution {
public boolean isAnagram(String s, String t) {
    if (s.length() != t.length()) {
        return false;
}
     char[] ch1 = s.toCharArray();
     char[] ch2= t.toCharArray();
     Arrays.sort(ch1);
     Arrays.sort(ch2);
     return Arrays.equals(ch1,ch2);
  }
  }

____________________________________________________________________________________________________________________________

//method 2
class Solution {
    public boolean isAnagram(String s, String t) {
          char [] count=new char[26];
          if(s.length() != t.length()) return false;
          for(int i=0;i<s.length();i++){
               count[s.charAt(i)-'a']++;
               count[t.charAt(i)-'a']--;
          }
          for(int i=0;i<26;i++){
                   if(count[i] != 0){
                    return false;
                   }
          }
          return true;
    }
_____________________________________________________________________________________________________________________________

//method 3
same phle s ko map m dalo and t se 

import java.util.HashMap;
public class Solution {
    public boolean isAnagram(String s, String t) {
        // If the lengths of s and t are different, they can't be anagrams
        if (s.length() != t.length()) {
            return false;
        }

        // Create a HashMap to store character frequencies
        HashMap<Character, Integer> map = new HashMap<>();

        // Count the frequency of characters in string s
        for (char ch : s.toCharArray()) {
            map.put(ch, map.getOrDefault(ch, 0) + 1);
        }

        // Decrease the frequency for characters in string t
        for (char ch : t.toCharArray()) {
            if (!map.containsKey(ch)) {
                return false;  // If a character in t doesn't exist in map, return false
            }
            map.put(ch, map.get(ch) - 1);
        }

        // Check if all values in the map are zero
        for (int count : map.values()) {
            if (count != 0) {
                return false;  // If any value is not zero, return false
            }
        }

        // If all values are zero, the strings are anagrams
        return true;
    }

    public static void main(String[] args) {
        Solution solution = new Solution();
        String s = "nl";  // First string
        String t = "rx";  // Second string
        boolean result = solution.isAnagram(s, t);
        System.out.println(result);  // Output: false
    }
}
