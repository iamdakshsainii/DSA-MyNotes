Revision 
we have 2 methods wither use arraylisrt or array
try both out




Problem Statement
Given a 0-indexed string s, permute s to get a new string t such that:
All consonants remain in their original places. More formally, 
if there is an index i with 0 <= i < s.length such that s[i] is a consonant, then t[i] = s[i].
The vowels must be sorted in the nondecreasing order of their ASCII values. 
More formally, for pairs of indices i, j with 0 <= i < j < s.length such that s[i] 
and s[j] are vowels, then t[i] must not have a higher ASCII value than t[j].
Return the resulting string.
The vowels are 'a', 'e', 'i', 'o', and 'u', and they can appear in lowercase or
 uppercase. Consonants comprise all letters that are not vowels.

 
Example 1:
Input: s = "lEetcOde"
Output: "lEOtcede"
Explanation: 'E', 'O', and 'e' are the vowels in s; 'l', 't', 'c', and 'd'
are all consonants. The vowels are sorted according to their ASCII values, 
and the consonants remain in the same places.



class Solution {
    public String sortVowels(String s) {
        int n= s.length();
        // step 1 either this way or simply apply a check if (s.charAt(i) is a,e,i,  o,u,uppercases so put to arraylist)
        ArrayList<Character> totalvowels=  new ArrayList<>(Arrays.asList('a','e',  'i','o','u','A','E', 'I','O','U'));
        //step 2 arraylist me dalna hai if we dont set any check 
        ArrayList<Character> vowels = new ArrayList<>();
        for(int i=0;i<n;i++){
              if(totalvowels.contains(s.charAt(i))){
                  vowels.add(s.charAt(i));
              }
           }
         // step 3 arraylist ko sort 
         Collections.sort(vowels);
         //step 4 set now
         int index=0;
        StringBuilder sb= new StringBuilder(s);
        for(int i=0;i<n;i++){
            if(totalvowels.contains(s.charAt(i))){
                    sb.setCharAt(i,vowels.get(index));
                    index++;
            } 
        }
        return sb.toString();
    }
}



<<<<<<<<<<<<<<<< by array >>>>>>>>>>>>>>>>>>>>>>>

// Method 2
class Solution {
    boolean isvowel(char c, char[] totalvowels ,int n ){
           for(int i=0;i<n;i++){
                  if(c==totalvowels[i]){
                     return true;
                  }
           }
              return false;
       }

   public String sortVowels(String s) {
       int n= s.length();
       char[] totalvowels= new char[]{'a','e','i','o','u','A','E', 'I','O','U'};
       char [] vowels = new char[n];
       int index2=0;
       for(int i=0;i<n;i++){
              if(isvowel(s.charAt(i),totalvowels,totalvowels.length)){
                    vowels[index2++]=s.charAt(i);
              }
       }
       Arrays.sort(vowels,0,index2);
       int index=0;
       StringBuilder sb= new StringBuilder(s);
       for(int i=0;i<n;i++){
            if(isvowel(s.charAt(i),totalvowels,totalvowels.length)){
                 sb.setCharAt(i,vowels[index]);
                 index++;
       }
       }
       return sb.toString();
   }
}
